// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  id,
  created_at,
  updated_at,
  published_at,
  title,
  url,
  description,
  feed_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, created_at, updated_at, published_at, title, url, description, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	PublishedAt sql.NullTime
	Title       string
	Url         string
	Description string
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PublishedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.FeedID,
	)
	return i, err
}

const getPostsByUserId = `-- name: GetPostsByUserId :many
SELECT p.id as p_id, p.created_at as p_created_at, p.updated_at as p_updated_at, p.published_at as p_published_at, p.title as p_title, p.url as p_url, p.description as p_description, f.id as f_id, f.name as f_name, f.user_id as f_user_id FROM posts p INNER JOIN feeds f on p.feed_id = f.id INNER JOIN feed_follows ff on ff.feed_id = f.id WHERE ff.user_id = $1 ORDER BY p.created_at DESC LIMIT $2
`

type GetPostsByUserIdParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsByUserIdRow struct {
	PID          uuid.UUID
	PCreatedAt   time.Time
	PUpdatedAt   time.Time
	PPublishedAt sql.NullTime
	PTitle       string
	PUrl         string
	PDescription string
	FID          uuid.UUID
	FName        string
	FUserID      uuid.UUID
}

func (q *Queries) GetPostsByUserId(ctx context.Context, arg GetPostsByUserIdParams) ([]GetPostsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIdRow
	for rows.Next() {
		var i GetPostsByUserIdRow
		if err := rows.Scan(
			&i.PID,
			&i.PCreatedAt,
			&i.PUpdatedAt,
			&i.PPublishedAt,
			&i.PTitle,
			&i.PUrl,
			&i.PDescription,
			&i.FID,
			&i.FName,
			&i.FUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
